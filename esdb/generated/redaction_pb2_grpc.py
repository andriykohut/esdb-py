# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import redaction_pb2 as redaction__pb2


class RedactionStub(object):
    """The intended usage is as follows:
    1. Initiate the SwitchChunks() call in order to lock the database for chunk switching.
    This ensures that chunks / event positions will not change while the lock is acquired.
    2. The GetEventPositions() call is then initiated to obtain the required event positions.
    3. The relevant chunks are copied to files with a .tmp extension and modified as necessary.
    4. SwitchChunk requests are then sent to replace the relevant chunks with the modified chunks.
    5. Finally, the lock is released by ending the SwitchChunks() call.

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEventPositions = channel.stream_stream(
                '/event_store.client.redaction.Redaction/GetEventPositions',
                request_serializer=redaction__pb2.GetEventPositionReq.SerializeToString,
                response_deserializer=redaction__pb2.GetEventPositionResp.FromString,
                )
        self.SwitchChunks = channel.stream_stream(
                '/event_store.client.redaction.Redaction/SwitchChunks',
                request_serializer=redaction__pb2.SwitchChunkReq.SerializeToString,
                response_deserializer=redaction__pb2.SwitchChunkResp.FromString,
                )


class RedactionServicer(object):
    """The intended usage is as follows:
    1. Initiate the SwitchChunks() call in order to lock the database for chunk switching.
    This ensures that chunks / event positions will not change while the lock is acquired.
    2. The GetEventPositions() call is then initiated to obtain the required event positions.
    3. The relevant chunks are copied to files with a .tmp extension and modified as necessary.
    4. SwitchChunk requests are then sent to replace the relevant chunks with the modified chunks.
    5. Finally, the lock is released by ending the SwitchChunks() call.

    """

    def GetEventPositions(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SwitchChunks(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RedactionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEventPositions': grpc.stream_stream_rpc_method_handler(
                    servicer.GetEventPositions,
                    request_deserializer=redaction__pb2.GetEventPositionReq.FromString,
                    response_serializer=redaction__pb2.GetEventPositionResp.SerializeToString,
            ),
            'SwitchChunks': grpc.stream_stream_rpc_method_handler(
                    servicer.SwitchChunks,
                    request_deserializer=redaction__pb2.SwitchChunkReq.FromString,
                    response_serializer=redaction__pb2.SwitchChunkResp.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'event_store.client.redaction.Redaction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Redaction(object):
    """The intended usage is as follows:
    1. Initiate the SwitchChunks() call in order to lock the database for chunk switching.
    This ensures that chunks / event positions will not change while the lock is acquired.
    2. The GetEventPositions() call is then initiated to obtain the required event positions.
    3. The relevant chunks are copied to files with a .tmp extension and modified as necessary.
    4. SwitchChunk requests are then sent to replace the relevant chunks with the modified chunks.
    5. Finally, the lock is released by ending the SwitchChunks() call.

    """

    @staticmethod
    def GetEventPositions(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/event_store.client.redaction.Redaction/GetEventPositions',
            redaction__pb2.GetEventPositionReq.SerializeToString,
            redaction__pb2.GetEventPositionResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SwitchChunks(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/event_store.client.redaction.Redaction/SwitchChunks',
            redaction__pb2.SwitchChunkReq.SerializeToString,
            redaction__pb2.SwitchChunkResp.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
